#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;ctype.h&gt;
#define MAX_CODE_LENGTH 1000
#define MAX_TOKEN_LENGTH 100
typedef enum {
KEYWORD,
IDENTIFIER,
CONSTANT,
OPERATOR,
PUNCTUATION
} TokenType;
const char *keywords[] = {&quot;int&quot;, &quot;float&quot;, &quot;void&quot;, &quot;if&quot;, &quot;else&quot;, &quot;while&quot;,
&quot;for&quot;}; const char *operators = &quot;+-*/=&lt;&gt;&quot;;
const char *punctuation = &quot;;(),{}&quot;;
int is_keyword(const char *token) {
for (int i = 0; i &lt; sizeof(keywords) / sizeof(keywords[0]); ++i)
{ if (strcmp(token, keywords[i]) == 0) {
return 1;
}
}
return 0;
}
int is_operator(char token) {
return strchr(operators, token) != NULL;
}
int is_punctuation(char token) {
return strchr(punctuation, token) != NULL;
}
TokenType get_token_type(const char *token) {
if (is_keyword(token)) {
return KEYWORD;
} else if (isdigit(token[0])) {
return CONSTANT;
} else if (isalpha(token[0]) || token[0] == &#39;_&#39;) {
return IDENTIFIER;
} else if (is_operator(token[0])) {
return OPERATOR;
} else if (is_punctuation(token[0])) {
return PUNCTUATION;
} else {
return -1; // Invalid token type
}
}
void tokenize(const char *code) {
char
token[MAX_TOKEN_LENGTH];
int i = 0;
while (*code != &#39;\0&#39;) {
if (isspace(*code))
{
code++;
continue;
}
if (is_operator(*code) || is_punctuation(*code))
{ printf(&quot;(%c, OPERATOR)\n&quot;, *code);
code++;
continue;
}
if (isalpha(*code) || *code == &#39;_&#39;) {
while (isalnum(*code) || *code == &#39;_&#39;) {
token[i++] = *code++;
}
token[i] =
&#39;\0&#39;; i = 0;
printf(&quot;(%s, %s)\n&quot;, token, is_keyword(token) ? &quot;KEYWORD&quot; : &quot;IDENTIFIER&quot;);
continue;
}
if (isdigit(*code)) {
while (isdigit(*code) || *code == &#39;.&#39;) {
token[i++] = *code++;
}
token[i] =
&#39;\0&#39;; i = 0;
printf(&quot;(%s, CONSTANT)\n&quot;, token);

210701016 â€“ ADITI S

continue;
}
code++;
}
}
int main() {
char code[MAX_CODE_LENGTH];
printf(&quot;Enter your C code:\n&quot;);
fgets(code, MAX_CODE_LENGTH, stdin);
tokenize(code);
return 0;
}
